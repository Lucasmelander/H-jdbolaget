-- Drop existing table and policies if they exist
DROP TABLE IF EXISTS public.form_submissions CASCADE;

-- Create the form_submissions table
CREATE TABLE public.form_submissions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    name TEXT NOT NULL,
    email TEXT NOT NULL,
    phone TEXT NOT NULL,
    company TEXT,
    message TEXT NOT NULL,
    service_type TEXT NOT NULL,
    project_start DATE,
    status TEXT DEFAULT 'new' NOT NULL,
    CONSTRAINT status_values CHECK (status IN ('new', 'in_progress', 'completed'))
);

-- Enable Row Level Security
ALTER TABLE public.form_submissions ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Enable insert for anonymous users" 
ON public.form_submissions 
FOR INSERT 
TO anon
WITH CHECK (true);

CREATE POLICY "Enable select for anonymous users" 
ON public.form_submissions 
FOR SELECT 
TO anon
USING (true);

-- Create updated_at trigger
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_form_submissions_updated_at
    BEFORE UPDATE ON public.form_submissions
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Add some indexes for better performance
CREATE INDEX idx_form_submissions_created_at ON public.form_submissions(created_at DESC);
CREATE INDEX idx_form_submissions_status ON public.form_submissions(status);

-- Grant necessary permissions
GRANT ALL ON public.form_submissions TO postgres;
GRANT ALL ON public.form_submissions TO service_role;
GRANT INSERT, SELECT ON public.form_submissions TO anon;
GRANT USAGE ON SEQUENCE public.form_submissions_id_seq TO anon;
